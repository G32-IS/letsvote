generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("BE_DATABASE_URL")
}

model PlaceOfBirth {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    region      String
    locality    String
    users       User[]
    events      Event[]
    @@unique([region, locality])
}

enum UserRole {
    SysAdmin
    Admin
    Voter
}

model User {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    email           String          @unique
    hashedPassword  String
    name            String?
    pob             PlaceOfBirth    @relation(fields: [pobId], references: [id])
    pobId           String          @db.ObjectId
    role            UserRole
    events          Event[]
    partecipations  Partecipation[]
    requests        Request[]
}

model Choice {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    title           String
    body            String?
    event           Event       @relation(fields: [eventId], references: [id])
    eventId         String      @db.ObjectId
    votes           Vote[]
}

enum EventType {
    ReferendumNazionale
    ReferendumRegionale
    ElezioneParlamentare
    ElezioneRegionale
    ElezioneProvinciale
    ElezioneComunale
}

model Event {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    title           String
    body            String?
    type            EventType
    author          User            @relation(fields: [authorId], references: [id])
    authorId        String          @db.ObjectId
    pob             PlaceOfBirth    @relation(fields: [pobId], references: [id])
    pobId           String          @db.ObjectId
    startDate       DateTime
    endDate         DateTime
    choices         Choice[]
    votes           Vote[]
    partecipations  Partecipation[]
}

model Partecipation {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    date        DateTime    @default(now())
    user        User        @relation(fields: [userId], references: [id])
    userId      String      @db.ObjectId
    event       Event       @relation(fields: [eventId], references: [id])
    eventId     String      @db.ObjectId
}

model Vote {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    choice      Choice      @relation(fields: [choiceId], references: [id])
    choiceId    String      @db.ObjectId
    event       Event       @relation(fields: [eventId], references: [id])
    eventId     String      @db.ObjectId
}

enum RequestState {
    Pending
    Accepted
    Declined
}

model Request {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    user        User            @relation(fields: [userId], references: [id])
    userId      String          @db.ObjectId
    date        DateTime        @default(now())
    state       RequestState    @default(Pending)
}